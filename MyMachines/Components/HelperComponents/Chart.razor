<h5>@ChartHeading</h5>

<div class="chart-container">
    @if (KeyValue is null)
    {
        <div>Loading...</div>
    }
    else
    {
        @if (valueTotal != 0)
        {
            @if (ChartType == chartType.Donut)
            {
                <div class="stats-info">
                    <div class="graph-container">
                        <div class="percent">
                            <svg viewBox="0 0 36 36" id="circular-chart">
                                @foreach (var item in KeyValue)
                                {
                                    <path class="circle" stroke-dasharray="@addedPercent, 100" d="M18 2.0845
      a 15.9155 15.9155 0 0 1 0 31.831
      a 15.9155 15.9155 0 0 1 0 -31.831" />
                                    addedPercent -= PercentOf(valueTotal, item.Value);
                                }

                            </svg>
                        </div>
                        <p>Total: @valueTotal</p>
                    </div>
                </div>
            }
            else if (ChartType == chartType.Bar)
            {
                <div class="keyvalue-stats">
                    @foreach (var pair in KeyValue)
                    {
                        <div class="key-group">
                            <div class="bar" style="height:@PercentOf(valueTotal, pair.Value)%;"></div>
                            <p class="key">@pair.Key</p>
                        </div>
                    }
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public chartType ChartType { get; set; }
    [Parameter]
    public string ChartHeading { get; set; }
    [Parameter]
    public List<KeyValuePair<string, int>> KeyValue { get; set; }

    private int valueTotal { get; set; }
    private int addedPercent { get; set; } = 100;

    public enum chartType
    {
        Donut,
        Bar
    }

    protected override async Task OnParametersSetAsync()
    {
        if (KeyValue is not null)
        {
            var smt = KeyValue;
            valueTotal = KeyValue.Sum(v => v.Value);
        }
    }
    protected int PercentOf(int total, int value)
    {
        return ((value * 100) / total);
    }


    // Charts adapted from: https://codepen.io/jorgemoovein-the-bashful/pen/yLeLELw
}
