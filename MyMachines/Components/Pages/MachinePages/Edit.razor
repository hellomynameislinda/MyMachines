@page "/my-machines/edit"
@using MyMachines.Entities
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject MyMachines.Repositories.IMachineRepository _machineRepository

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Machine</h4>
<hr />
@if (Machine is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Machine" OnValidSubmit="UpdateMachine" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Machine.Id" value="@Machine.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Machine.Name" class="form-control" />
                    <ValidationMessage For="() => Machine.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputCheckbox id="status" @bind-Value="Machine.Status" class="form-check-input" />
                    <ValidationMessage For="() => Machine.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateadded" class="form-label">DateAdded:</label>
                    <InputDate id="dateadded" @bind-Value="Machine.DateAdded" class="form-control" />
                    <ValidationMessage For="() => Machine.DateAdded" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/my-machines">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    public Machine? Machine { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Machine ??= await _machineRepository.GetAsync(Id);

        if (Machine is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateMachine()
    {
        //DB.Attach(Machine!).State = EntityState.Modified;

        try
        {
            _machineRepository.Update(Machine!);
            //DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!await _machineRepository.AnyAsync(Machine!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/my-machines");
    }

}
