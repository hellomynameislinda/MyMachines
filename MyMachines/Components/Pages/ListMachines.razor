@* Add a route parameter, this parameter needs a corresponding parameter attribute to work.
   It will be called by /my-machines/123
   Without the parameter added to the URL, we will get a 404, this is avoided by adding the ? behind the parameter.
   The :int means we will only bind int values to the parameter (otherwise the parameter has to be a string).
*@
@page "/my-machines/{machineid:int?}"
@using MyMachines.Components.SubComponents
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyMachines.Entities
@using Microsoft.EntityFrameworkCore
@inject MyMachines.Data.MyMachinesContext DbContext
@* @page "/my-machines" *@

@rendermode InteractiveServer

@attribute [StreamRendering]

<PageTitle>MyMachines - Display machines</PageTitle>
<h3>MyMachines</h3>

@if (MachineId == 0)
{



    @if (Machines == null) // This can be used to show something while loading content
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm method="post" Model="Machine" OnValidSubmit="AddMachine" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Machine name</th>
                        <th scope="col">Status</th>
                        <th scope="col">Date added</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @foreach (var machine in Machines)
                    {
                        <tr>
                            <th scope="row">@machine.Name</th>
                            <td>@machine.Status</td>
                            <td>@machine.DateAdded</td>
                            <td>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-secondary">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power" viewBox="0 0 16 16">
                                            <path d="M7.5 1v7h1V1z"></path>
                                            <path d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812"></path>
                                        </svg>
                                        <span class="visually-hidden">Change status</span>
                                    </button>
                                    <a href="@($"my-machines/edit?id={machine.Id}")" class="btn btn-outline-secondary" role="button">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                            <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325"></path>
                                        </svg>
                                        <span class="visually-hidden">Edit</span>
                                    </a>
                                    <button type="button" class="btn btn-outline-secondary">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"></path>
                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"></path>
                                        </svg>
                                        <span class="visually-hidden">Delete</span>
                                    </button>
                                </div>
                                <button class="btn" onclick="TryDelete(machine.Id)">Delete</button>
                                href="@($"machines/delete?id={machine.Id}")"
                            </td>
                        </tr>
                    }
                </tbody>
                <tbody class="table-group-divider">
                    <tr>
                        <th scope="row">
                            <InputText id="name" @bind-Value="Machine.Name" class="form-control" />
                            <ValidationMessage For="() => Machine.Name" class="text-danger" />
                        </th>
                        <td>
                            <InputCheckbox id="status" @bind-Value="Machine.Status" class="form-check-input" />
                            <ValidationMessage For="() => Machine.Status" class="text-danger" />
                        </td>
                        <td>
                            <InputDate id="dateadded" @bind-Value="Machine.DateAdded" class="form-control" />
                            <ValidationMessage For="() => Machine.DateAdded" class="text-danger" />
                        </td>
                        <td><button type="submit" class="btn btn-primary">Create</button></td>
                    </tr>
                </tbody>

            </table>
        </EditForm>

        @if (showModal)
        {
        <ConfirmDeleteModal />
        }

        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
            Launch static backdrop modal
        </button>


    }
}
else
{
    <div>This is the machine: @MachineId</div>
}
















@code {
    public bool showModal = true;
    // Parameter is currently not used
    [Parameter]
    public int MachineId { get; set; } // Same name as the route paramater, to pick it up. Not case sensitive.

    [SupplyParameterFromForm]
    public Machine Machine { get; set; } = new();

    public List<Machine> Machines { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMachinesAsync();
    }

    private async Task LoadMachinesAsync()
    {
        Machines = await DbContext.Machine.OrderBy(machine => machine.DateAdded)
        .ToListAsync();
    }

    //To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    protected async Task AddMachine()
    {
        DbContext.Machine.Add(Machine);
        await DbContext.SaveChangesAsync();
        await LoadMachinesAsync(); // Update list content

        //TODO: Empty the current fields once saved

    }

    protected void TryDelete(Guid machineId)
    {
        
    }

    // Machine? deleteMachine;

    // [SupplyParameterFromQuery]
    // public Guid Id { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     machine = await DB.Machine.FirstOrDefaultAsync(m => m.Id == Id);

    //     if (machine is null)
    //     {
    //         NavigationManager.NavigateTo("notfound");
    //     }
    // }

    // public async Task DeleteMachine()
    // {
    //     DB.Machine.Remove(machine!);
    //     await DB.SaveChangesAsync();
    //     NavigationManager.NavigateTo("/machines");
    // }



}
