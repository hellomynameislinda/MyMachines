@* Add a route parameter, this parameter needs a corresponding parameter attribute to work.
   It will be called by /my-machines/123
   Without the parameter added to the URL, we will get a 404, this is avoided by adding the ? behind the parameter.
   The :int means we will only bind int values to the parameter (otherwise the parameter has to be a string).
*@
@page "/my-machines/{machineid:int?}"
@using MyMachines.Components.SubComponents
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyMachines.Entities
@inject MyMachines.Data.MyMachinesContext DbContext
@* @page "/my-machines" *@

@rendermode InteractiveServer

@attribute [StreamRendering]

<PageTitle>MyMachines - Display machines</PageTitle>
<h3>MyMachines</h3>

@if (MachineId == 0)
{
    @if (DbContext.Machine == null) // This can be used to show something while loading content
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <QuickGrid Class="table" Items="DbContext.Machine">
            <PropertyColumn Property="machine => machine.Name" />
            <PropertyColumn Property="machine => machine.Status" />
            <PropertyColumn Property="machine => machine.DateAdded" />

            <TemplateColumn Context="machine">
                <a href="@($"machines/edit?id={machine.Id}")">Edit</a> |
                <a href="@($"machines/details?id={machine.Id}")">Details</a> |
                <a href="@($"machines/delete?id={machine.Id}")">Delete</a>
            </TemplateColumn>
        </QuickGrid>


        <EditForm method="post" Model="Machine" OnValidSubmit="AddMachine" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Machine.Name" class="form-control" />
                <ValidationMessage For="() => Machine.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label>
                <InputCheckbox id="status" @bind-Value="Machine.Status" class="form-check-input" />
                <ValidationMessage For="() => Machine.Status" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="dateadded" class="form-label">DateAdded:</label>
                <InputDate id="dateadded" @bind-Value="Machine.DateAdded" class="form-control" />
                <ValidationMessage For="() => Machine.DateAdded" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    }
}
else
{

    <div>This is the machine: @MachineId</div>
}
















@code {

    [Parameter]
    public int MachineId { get; set; } // Same name as the route paramater, to pick it up. Not case sensitive.




    [SupplyParameterFromForm]
    public Machine Machine { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddMachine()
    {
        DbContext.Machine.Add(Machine);
        await DbContext.SaveChangesAsync();
    }





}
